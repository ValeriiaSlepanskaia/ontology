<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RDFSharp.Semantics</name>
    </assembly>
    <members>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums">
            <summary>
            RDFSemanticsEnums represents a collector for all the enumerations used by the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation">
            <summary>
            RDFOntologyStandardAnnotation represents an enumeration for predefined ontology annotation properties
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionInfo">
            <summary>
            owl:versionInfo
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.VersionIRI">
            <summary>
            owl:versionIRI
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.Comment">
            <summary>
            rdfs:comment
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.Label">
            <summary>
            rdfs:label
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.SeeAlso">
            <summary>
            rdfs:seeAlso
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.IsDefinedBy">
            <summary>
            rdfs:isDefinedBy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.Imports">
            <summary>
            owl:imports
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.BackwardCompatibleWith">
            <summary>
            owl:BackwardCompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.IncompatibleWith">
            <summary>
            owl:IncompatibleWith
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation.PriorVersion">
            <summary>
            owl:PriorVersion
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory">
            <summary>
            RDFOntologyValidatorEvidenceCategory represents an enumeration for possible categories of ontology validation evidence
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory.Warning">
            <summary>
            Specifications have not been violated: ontology may contain semantic inconsistencies
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory.Error">
            <summary>
            Specifications have been violated: ontology will contain semantic inconsistencies
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory">
            <summary>
            RDFOntologyReasonerEvidenceCategory represents an enumeration for possible categories of ontology reasoner evidence
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory.ClassModel">
            <summary>
            Semantic inference has been generated within the ontology class model
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory.PropertyModel">
            <summary>
            Semantic inference has been generated within the ontology property model
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory.Data">
            <summary>
            Semantic inference has been generated within the ontology data
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceType">
            <summary>
            RDFOntologyInferenceType represents an enumeration for possible types of a semantic inference
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceType.None">
            <summary>
            Not a semantic inference
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceType.API">
            <summary>
            Semantic inference generated during ontology modeling
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceType.Reasoner">
            <summary>
            Semantic inference generated during ontology reasoning
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior">
            <summary>
            RDFOntologyInferenceExportBehavior represents an enumeration for supported inference export behaviors
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.None">
            <summary>
            Does not export any semantic inference
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.OnlyModel">
            <summary>
            Exports only semantic inferences of ontology model
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.OnlyData">
            <summary>
            Exports only semantic inferences of ontology data
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior.ModelAndData">
            <summary>
            Exports both semantic inferences of ontology model and ontology data 
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyTaxonomyCategory">
            <summary>
            RDFOntologyTaxonomyCategory represents an enumeration for supported types of taxonomy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyTaxonomyCategory.Annotation">
            <summary>
            Annotation taxonomy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyTaxonomyCategory.Model">
            <summary>
            Model taxonomy
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyTaxonomyCategory.Data">
            <summary>
            Data taxonomy
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyClassNature">
            <summary>
            RDFOntologyClassNature represents an enumeration for possible nature of an ontology class (RDFS/OWL)
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyClassNature.RDFS">
            <summary>
            rdfs:Class
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyClassNature.OWL">
            <summary>
            owl:Class
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEvents">
            <summary>
            RDFSemanticsEvents represents a collector for all the events generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="E:RDFSharp.Semantics.RDFSemanticsEvents.OnSemanticsInfo">
            <summary>
            Event representing an information message generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEvents.RDFSemanticsInfoEventHandler">
            <summary>
            Delegate to handle information events generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsEvents.RaiseSemanticsInfo(System.String)">
            <summary>
            Internal invoker of the subscribed information event handler
            </summary>
        </member>
        <member name="E:RDFSharp.Semantics.RDFSemanticsEvents.OnSemanticsWarning">
            <summary>
            Event representing a warning message generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsEvents.RDFSemanticsWarningEventHandler">
            <summary>
            Delegate to handle warning events generated within the "RDFSharp.Semantics" namespace
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsEvents.RaiseSemanticsWarning(System.String)">
            <summary>
            Internal invoker of the subscribed warning event handler
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsException">
            <summary>
            RDFSemanticsException represents an exception thrown during creation and execution of RDF semantics.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsException.#ctor">
            <summary>
            Basic ctor to throw an empty RDFSemanticsException
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsException.#ctor(System.String)">
            <summary>
            Basic ctor to throw an RDFSemanticsException with message
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsException.#ctor(System.String,System.Exception)">
            <summary>
            Basic ctor to throw an RDFSemanticsException with message and inner exception
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic ctor to support serialization of a remotely thrown RDFSemanticsException
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFModelExtensions">
            <summary>
            RDFModelExtensions represents an extension class for RDFSharp.Model functionalities
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyClass(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyClassNature)">
            <summary>
            Gets an ontology class of the given nature from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyObjectProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology object property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyDatatypeProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology datatype property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyAnnotationProperty(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology annotation property from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyFact(RDFSharp.Model.RDFResource)">
            <summary>
            Gets an ontology fact from the given RDF resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFModelExtensions.ToRDFOntologyLiteral(RDFSharp.Model.RDFLiteral)">
            <summary>
            Gets an ontology literal from the given RDF literal
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFQueryExtensions">
            <summary>
            RDFQueryExtensions represents an extension class for RDFSharp.Query functionalities
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFQueryExtensions.ApplyToOntology(RDFSharp.Query.RDFSelectQuery,RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL SELECT query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFQueryExtensions.ApplyToOntology(RDFSharp.Query.RDFAskQuery,RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL ASK query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFQueryExtensions.ApplyToOntology(RDFSharp.Query.RDFConstructQuery,RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL CONSTRUCT query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFQueryExtensions.ApplyToOntology(RDFSharp.Query.RDFDescribeQuery,RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Applies the given SPARQL DESCRIBE query to the given ontology (which is converted into
            a RDF graph including semantic inferences in respect of the given export behavior)
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFSemanticsUtilities">
            <summary>
            RDFSemanticsUtilities is a collector of reusable utility methods for RDF ontology management.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsUtilities.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets an ontology representation of the given graph
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFSemanticsUtilities.ToRDFGraph(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of the given ontology, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFBASEChecker">
            <summary>
            RDFBASEChecker is responsible for implicit RDFS/OWL-DL validation of ontologies during modeling
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckReservedClass(RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given class is a reserved BASE ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckSubClassOfCompatibility(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given childclass can be set subclassof the given motherclass
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckEquivalentClassCompatibility(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given aclass can be set equivalentclassof the given bclass
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckDisjointWithCompatibility(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given aclass can be set disjointwith the given bclass
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckReservedProperty(RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Checks if the given property is a reserved BASE ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckSubPropertyOfCompatibility(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given childproperty can be set subpropertyof the given motherproperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckSubPropertyOfCompatibility(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyDatatypeProperty)">
            <summary>
            Checks if the given childproperty can be set subpropertyof the given motherproperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckEquivalentPropertyCompatibility(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aproperty can be set equivalentpropertyof the given bproperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckEquivalentPropertyCompatibility(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyDatatypeProperty)">
            <summary>
            Checks if the given aproperty can be set equivalentpropertyof the given bproperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckInverseOfPropertyCompatibility(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aproperty can be set inverseof the given bproperty
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckClassTypeCompatibility(RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given class can be assigned as classtype of facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckSameAsCompatibility(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Checks if the given afact can be set sameas the given bfact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckDifferentFromCompatibility(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Checks if the given afact can be set differentfrom the given bfact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEChecker.CheckTransitiveAssertionCompatibility(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> objectProperty -> bFact" has transitive assertions
            which would cause transitive cycles (unallowed concept in OWL-DL)
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFBASEHelper">
            <summary>
            RDFBASEHelper contains utility methods supporting RDFS/OWL-DL modeling and reasoning
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsSubClassOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is subClass of the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSubClassesOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the subClasses of the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSubClassesOfInternalVisitor(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Subsumes the "rdfs:subClassOf" taxonomy to discover direct and indirect subClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsSuperClassOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is superClass of the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSuperClassesOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the superClasses of the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSuperClassesOfInternalVisitor(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Subsumes the "rdfs:subClassOf" taxonomy to discover direct and indirect superClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsEquivalentClassOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is equivalentClass of the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetEquivalentClassesOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the equivalentClasses of the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetEquivalentClassesOfInternal(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.RDFOntologyClass})">
            <summary>
            Subsumes the "owl:equivalentClass" taxonomy to discover direct and indirect equivalentClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsDisjointClassWith(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given aClass is disjointClass with the given bClass within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetDisjointClassesWith(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the disjointClasses with the given class within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetDisjointClassesWithInternal(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.RDFOntologyClass})">
            <summary>
            Subsumes the "owl:disjointWith" taxonomy to discover direct and indirect disjointClasses of the given class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsDomainOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Checks if the given ontology class is domain of the given ontology property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetDomainOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Enlists the domain classes of the given property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsRangeOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Checks if the given ontology class is range of the given ontology property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetRangeOf(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Enlists the range classes of the given property within the given ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsLiteralCompatible(RDFSharp.Semantics.RDFOntologyClassModel,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given ontology class is compatible with 'rdfs:Literal' within the given class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsSubPropertyOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is subProperty of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSubPropertiesOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Enlists the sub properties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSubPropertiesOfInternalVisitor(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Subsumes the "rdfs:subPropertyOf" taxonomy to discover direct and indirect subProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsSuperPropertyOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is superProperty of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSuperPropertiesOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Enlists the super properties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSuperPropertiesOfInternalVisitor(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Subsumes the "rdfs:subPropertyOf" taxonomy to discover direct and indirect superProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsEquivalentPropertyOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Checks if the given aProperty is equivalentProperty of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetEquivalentPropertiesOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Enlists the equivalentProperties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetEquivalentPropertiesOfInternal(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyProperty,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.RDFOntologyProperty})">
            <summary>
            Subsumes the "owl:equivalentProperty" taxonomy to discover direct and indirect equivalentProperties of the given property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsInversePropertyOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Checks if the given aProperty is inverse property of the given bProperty within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetInversePropertiesOf(RDFSharp.Semantics.RDFOntologyPropertyModel,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Enlists the inverse properties of the given property within the given property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsSameFactAs(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Checks if the given aFact is sameAs the given bFact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSameFactsAs(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Enlists the sameFacts of the given fact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetSameFactsAsInternal(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.RDFOntologyFact})">
            <summary>
            Subsumes the "owl:sameAs" taxonomy to discover direct and indirect samefacts of the given facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsDifferentFactFrom(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Checks if the given aFact is differentFrom the given bFact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetDifferentFactsFrom(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Enlists the different facts of the given fact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetDifferentFactsFromInternal(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.RDFOntologyFact})">
            <summary>
            Subsumes the "owl:differentFrom" taxonomy to discover direct and indirect differentFacts of the given facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsTransitiveAssertionOf(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Checks if the given "aFact -> transProp" assertion links to the given bFact within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetTransitiveAssertionsOf(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Enlists the given "aFact -> transOntProp" assertions within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetTransitiveAssertionsOfInternal(RDFSharp.Semantics.RDFOntologyData,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyObjectProperty,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.RDFOntologyFact})">
            <summary>
            Enlists the transitive assertions of the given fact and the given property within the given data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.CheckIsMemberOf(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Checks if the given fact is member of the given class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOf(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOfClass(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOfComposite(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given composition within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOfEnumerate(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyEnumerateClass)">
            <summary>
            Enlists the facts which are members of the given enumeration within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOfRestriction(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyRestriction)">
            <summary>
            Enlists the facts which are members of the given restriction within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOfLiteralCompatibleClass(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the literals which are members of the given literal-compatible class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetMembersOfNonLiteralCompatibleClass(RDFSharp.Semantics.RDFOntology,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Enlists the facts which are members of the given non literal-compatible class within the given ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetInferences(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Gets an ontology made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetInferences(RDFSharp.Semantics.RDFOntologyModel)">
            <summary>
            Gets an ontology model made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetInferences(RDFSharp.Semantics.RDFOntologyClassModel)">
            <summary>
            Gets an ontology class model made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetInferences(RDFSharp.Semantics.RDFOntologyPropertyModel)">
            <summary>
            Gets an ontology property model made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.GetInferences(RDFSharp.Semantics.RDFOntologyData)">
            <summary>
            Gets an ontology data made by semantic inferences found in the given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.ClearInferences(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.ClearInferences(RDFSharp.Semantics.RDFOntologyModel)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.ClearInferences(RDFSharp.Semantics.RDFOntologyClassModel)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.ClearInferences(RDFSharp.Semantics.RDFOntologyPropertyModel)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEHelper.ClearInferences(RDFSharp.Semantics.RDFOntologyData)">
            <summary>
            Clears all the taxonomy entries marked as semantic inferences generated by a reasoner
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFBASEOntology">
            <summary>
            RDFBASEOntology represents a partial OWL-DL ontology implementation of structural vocabularies (RDF/RDFS/OWL/XSD).
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEOntology.Instance">
            <summary>
            Singleton instance of the BASE ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEOntology.#cctor">
            <summary>
            Default-ctor to initialize the BASE ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFBASEReasonerRuleset">
            <summary>
            RDFBASEReasonerRuleset implements a subset of RDFS/OWL-DL entailment rules
            </summary>
        </member>
        <member name="F:RDFSharp.Semantics.RDFBASEReasonerRuleset.RulesCount">
            <summary>
            Counter of rules contained in the BASE ruleset
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.SubClassTransitivity">
            <summary>
            SubClassTransitivity (rdfs11) implements structural entailments based on 'rdfs:subClassOf' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.SubPropertyTransitivity">
            <summary>
            SubPropertyTransitivity (rdfs5) implements structural entailments based on 'rdfs:subPropertyOf' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.ClassTypeEntailment">
            <summary>
            ClassTypeEntailment (rdfs9) implements data entailments based on 'rdf:type' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.PropertyEntailment">
            <summary>
            PropertyEntailment (rdfs7) implements structural entailments based on 'rdfs:subPropertyOf' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.DomainEntailment">
            <summary>
            DomainEntailment (rdfs2) implements structural entailments based on 'rdfs:domain' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.RangeEntailment">
            <summary>
            RangeEntailment (rdfs3) implements structural entailments based on 'rdfs:range' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.EquivalentClassTransitivity">
            <summary>
            EquivalentClassTransitivity implements structural entailments based on 'owl:EquivalentClass' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.DisjointWithEntailment">
            <summary>
            DisjointWithEntailment implements structural entailments based on 'owl:DisjointWith' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.EquivalentPropertyTransitivity">
            <summary>
            EquivalentPropertyTransitivity implements structural entailments based on 'owl:EquivalentProperty' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.SameAsTransitivity">
            <summary>
            SameAsTransitivity implements structural entailments based on 'owl:SameAs' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.DifferentFromEntailment">
            <summary>
            DifferentFromEntailment implements structural entailments based on 'owl:DifferentFrom' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.InverseOfEntailment">
            <summary>
            InverseOfEntailment implements data entailments based on 'owl:inverseOf' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.SameAsEntailment">
            <summary>
            SameAsEntailment implements data entailments based on 'owl:SameAs' taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.SymmetricPropertyEntailment">
            <summary>
            SymmetricPropertyEntailment implements data entailments based on 'owl:SymmetricProperty' axiom
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFBASEReasonerRuleset.TransitivePropertyEntailment">
            <summary>
            TransitivePropertyEntailment implements data entailments based on 'owl:TransitiveProperty' axiom
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.#cctor">
            <summary>
            Static-ctor to initialize the BASE ruleset
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.SubClassTransitivityExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            SubClassTransitivity (rdfs11) implements structural entailments based on 'rdfs:subClassOf' taxonomy:
            ((C1 SUBCLASSOF C2)      AND (C2 SUBCLASSOF C3))      => (C1 SUBCLASSOF C3);
            ((C1 SUBCLASSOF C2)      AND (C2 EQUIVALENTCLASS C3)) => (C1 SUBCLASSOF C3);
            ((C1 EQUIVALENTCLASS C2) AND (C2 SUBCLASSOF C3))      => (C1 SUBCLASSOF C3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.SubPropertyTransitivityExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            SubPropertyTransitivity (rdfs5) implements structural entailments based on 'rdfs:subPropertyOf' taxonomy:
            ((P1 SUBPROPERTYOF P2)      AND (P2 SUBPROPERTYOF P3))      => (P1 SUBPROPERTYOF P3)
            ((P1 SUBPROPERTYOF P2)      AND (P2 EQUIVALENTPROPERTY P3)) => (P1 SUBPROPERTYOF P3)
            ((P1 EQUIVALENTPROPERTY P2) AND (P2 SUBPROPERTYOF P3))      => (P1 SUBPROPERTYOF P3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.ClassTypeEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            ClassTypeEntailment (rdfs9) implements structural entailments based on 'rdf:type' taxonomy:
            ((F TYPE C1) AND (C1 SUBCLASSOF C2))      => (F TYPE C2)
            ((F TYPE C1) AND (C1 EQUIVALENTCLASS C2)) => (F TYPE C2)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.PropertyEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            "PropertyEntailment (rdfs7) implements data entailments based on 'rdfs:subPropertyOf' taxonomy:"
            "((F1 P1 F2) AND (P1 SUBPROPERTYOF P2))      => (F1 P2 F2)"
            "((F1 P1 F2) AND (P1 EQUIVALENTPROPERTY P2)) => (F1 P2 F2)"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.DomainEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            "DomainEntailment (rdfs2) implements structural entailments based on 'rdfs:domain' taxonomy:"
            "((F1 P F2) AND (P RDFS:DOMAIN C)) => (F1 RDF:TYPE C)"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.RangeEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            "RangeEntailment (rdfs3) implements structural entailments based on 'rdfs:range' taxonomy:"
            "((F1 P F2) AND (P RDFS:RANGE C)) => (F2 RDF:TYPE C)"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.EquivalentClassTransitivityExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            EquivalentClassTransitivity implements structural entailments based on 'owl:EquivalentClass' taxonomy:
            ((C1 EQUIVALENTCLASS C2) AND (C2 EQUIVALENTCLASS C3)) => (C1 EQUIVALENTCLASS C3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.DisjointWithEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            DisjointWithEntailment implements structural entailments based on 'owl:DisjointWith' taxonomy:
            ((C1 EQUIVALENTCLASS C2) AND (C2 DISJOINTWITH C3))    => (C1 DISJOINTWITH C3)
            ((C1 SUBCLASSOF C2)      AND (C2 DISJOINTWITH C3))    => (C1 DISJOINTWITH C3)
            ((C1 DISJOINTWITH C2)    AND (C2 EQUIVALENTCLASS C3)) => (C1 DISJOINTWITH C3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.EquivalentPropertyTransitivityExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            EquivalentPropertyTransitivity implements structural entailments based on 'owl:EquivalentProperty' taxonomy:
            ((P1 EQUIVALENTPROPERTY P2) AND (P2 EQUIVALENTPROPERTY P3)) => (P1 EQUIVALENTPROPERTY P3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.SameAsTransitivityExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            SameAsTransitivity implements structural entailments based on 'owl:sameAs' taxonomy:
            ((F1 SAMEAS F2) AND (F2 SAMEAS F3)) => (F1 SAMEAS F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.DifferentFromEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            DifferentFromEntailment implements structural entailments based on 'owl:DifferentFrom' taxonomy:
            ((F1 SAMEAS F2)        AND (F2 DIFFERENTFROM F3)) => (F1 DIFFERENTFROM F3)
            ((F1 DIFFERENTFROM F2) AND (F2 SAMEAS F3))        => (F1 DIFFERENTFROM F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.InverseOfEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            InverseOfEntailment implements data entailments based on 'owl:inverseOf' taxonomy:
            ((F1 P1 F2) AND (P1 INVERSEOF P2)) => (F2 P2 F1)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.SameAsEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            SameAsEntailment implements data entailments based on 'owl:sameAs' taxonomy:
            ((F1 P F2) AND (F1 SAMEAS F3)) => (F3 P F2)
            ((F1 P F2) AND (F2 SAMEAS F3)) => (F1 P F3)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.SymmetricPropertyEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            SymmetricPropertyEntailment implements data entailments based on 'owl:SymmetricProperty' axiom:
            ((F1 P F2) AND (P TYPE SYMMETRICPROPERTY)) => (F2 P F1)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEReasonerRuleset.TransitivePropertyEntailmentExec(RDFSharp.Semantics.RDFOntology)">
            <summary>
            TransitivePropertyEntailment implements data entailments based on 'owl:TransitiveProperty' axiom:
            ((F1 P F2) AND (F2 P F3) AND (P TYPE TRANSITIVEPROPERTY)) => (F1 P F3)
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFBASEValidatorRuleset">
            <summary>
            RDFBASEValidatorRuleset implements a subset of RDFS/OWL-DL validation rules
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.Vocabulary_Disjointness(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for disjointness of vocabulary of classes, properties and facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.Vocabulary_Declaration(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for declaration of classes, properties and facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.Domain_Range(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for consistency of rdfs:domain and rdfs:range axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.InverseOf(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:inverseOf axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.SymmetricProperty(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for consistency of owl:SymmetricProperty axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.ClassType(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for consistency of rdf:type axioms
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.GlobalCardinalityConstraint(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking consistency of global cardinality constraints
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.LocalCardinalityConstraint(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking consistency of local cardinality constraints
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFBASEValidatorRuleset.Deprecation(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validation rule checking for usage of deprecated classes and properties
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.DC.RDFDCOntology">
            <summary>
            RDFDCOntology represents an OWL-DL ontology implementation of Dublin Core vocabulary
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.DC.RDFDCOntology.Instance">
            <summary>
            Singleton instance of the DC ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.DC.RDFDCOntology.#cctor">
            <summary>
            Default-ctor to initialize the DC ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.FOAF.RDFFOAFOntology">
            <summary>
            RDFFOAFOntology represents an OWL-DL ontology implementation of FOAF vocabulary
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.FOAF.RDFFOAFOntology.Instance">
            <summary>
            Singleton instance of the FOAF ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.FOAF.RDFFOAFOntology.#cctor">
            <summary>
            Default-ctor to initialize the FOAF ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.GEO.RDFGEOOntology">
            <summary>
            RDFGEOOntology represents an OWL-DL ontology implementation of W3C GEO vocabulary
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.GEO.RDFGEOOntology.Instance">
            <summary>
            Singleton instance of the GEO ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.GEO.RDFGEOOntology.#cctor">
            <summary>
            Default-ctor to initialize the GEO ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SIOC.RDFSIOCOntology">
            <summary>
            RDFSIOCOntology represents an OWL-DL ontology implementation of SIOC vocabulary
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SIOC.RDFSIOCOntology.Instance">
            <summary>
            Singleton instance of the SIOC ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SIOC.RDFSIOCOntology.#cctor">
            <summary>
            Default-ctor to initialize the SIOC ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations">
            <summary>
            RDFSKOSAnnotations represents a collector for annotations describing SKOS concepts.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.PrefLabel">
            <summary>
            "skos:prefLabel" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.AltLabel">
            <summary>
            "skos:altLabel" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.HiddenLabel">
            <summary>
            "skos:hiddenLabel" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.Note">
            <summary>
            "skos:Note" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.ChangeNote">
            <summary>
            "skos:changeNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.EditorialNote">
            <summary>
            "skos:editorialNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.HistoryNote">
            <summary>
            "skos:historyNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.ScopeNote">
            <summary>
            "skos:scopeNote" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.Definition">
            <summary>
            "skos:definition" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.Example">
            <summary>
            "skos:example" annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSAnnotations.#ctor">
            <summary>
            Default-ctor to build an empty ontology annotations metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSChecker">
            <summary>
            RDFSKOSChecker is responsible for implicit SKOS validation of ontologies during modeling
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckBroaderRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:broader/skos:broaderTransitive/skos:broadMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckNarrowerRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:narrower/skos:narrowerTransitive/skos:narrowMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckRelatedRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:related/skos:relatedMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckCloseOrExactMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the skos:closeMatch/skos:exactMatch relation can be added to the given aConcept with the given bConcept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckPrefLabel(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Checks if the skos:prefLabel/skosxl:prefLabel informations can be added to the given concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckAltLabel(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Checks if the skos:altLabel/skosxl:altLabel informations can be added to the given concept
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSChecker.CheckHiddenLabel(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Checks if the skos:hiddenLabel/skosxl:hiddenLabel informations can be added to the given concept
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSHelper">
            <summary>
             RDFSKOSHelper contains utility methods supporting SKOS modeling and reasoning
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddTopConceptRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the conceptScheme as top concept of the hierarchy
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddSemanticRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:semanticRelation' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddRelatedRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:related' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddBroaderRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:broader' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddBroaderTransitiveRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:broaderTransitive' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNarrowerRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:narrower' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNarrowerTransitiveRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:narrowerTransitive' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddMappingRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:mappingRelation' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddCloseMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:closeMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddExactMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:exactMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddBroadMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:broadMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNarrowMatchRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:narrowMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddRelatedMatchAssertion(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds a 'skos:relatedMatch' relation between the given concepts within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNotationRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given notation to the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddPrefLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given label as preferred label of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddAltLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given label as alternative label of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddHiddenLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given label as hidden label of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddLabelRelation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.SKOS.RDFSKOSLabel)">
            <summary>
            Adds a 'skosxl:labelRelation' relation between the given labels within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddLiteralFormAssertion(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSLabel,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal form of the given label within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddPrefLabelAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as preferred label annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddAltLabelAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as alternative label annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddHiddenLabelAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the "concept -> skos:hiddenLabel -> hiddenLabelLiteral" annotation to the concept scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:note' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddChangeNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:changeNote' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddEditorialNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:editorialNote' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddHistoryNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
             <summary>
            Adds the given literal as 'skos:historyNote' annotation of the given concept within the conceptScheme
             </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddScopeNoteAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:scopeNote' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddDefinitionAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:definition' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.AddExampleAnnotation(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal as 'skos:example' annotation of the given concept within the conceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasBroaderConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has broader/broaderTransitive concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetBroaderConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the broader/broaderTransitive concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetBroaderConceptsOfInternal(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.SKOS.RDFSKOSConcept})">
            <summary>
            Subsumes the "skos:broaderTransitive" taxonomy to discover direct and indirect broader concepts of the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasNarrowerConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has narrower/narrowerTransitive concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetNarrowerConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the narrower/narrowerTransitive concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetNarrowerConceptsOfInternal(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.SKOS.RDFSKOSConcept})">
            <summary>
            Subsumes the "skos:narrowerTransitive" taxonomy to discover direct and indirect narrower concepts of the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasRelatedConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has related concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetRelatedConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the related concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasBroadMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has broadMatch concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetBroadMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the broadMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasNarrowMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has narrowMatch concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetNarrowMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the narrowMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasRelatedMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept has relatedMatch concept the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetRelatedMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the relatedMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasCloseMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept skos:closeMatch the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetCloseMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the skos:closeMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.CheckHasExactMatchConcept(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Checks if the given aConcept skos:exactMatch the given bConcept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetExactMatchConceptsOf(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Enlists the skos:exactMatch concepts of the given concept within the given scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSHelper.GetExactMatchConceptsOfInternal(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme,RDFSharp.Semantics.SKOS.RDFSKOSConcept,System.Collections.Generic.Dictionary{System.Int64,RDFSharp.Semantics.SKOS.RDFSKOSConcept})">
            <summary>
            Subsumes the "skos:exactMatch" taxonomy to discover direct and indirect exactmatches of the given concept
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSOntology">
            <summary>
            RDFSKOSOntology represents an OWL-DL ontology implementation of SKOS vocabulary
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOntology.Instance">
            <summary>
            Singleton instance of the SKOS ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOntology.#cctor">
            <summary>
            Default-ctor to initialize the SKOS ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSRelations">
            <summary>
            RDFSKOSRelations represents a collector for relations connecting skos concepts.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.TopConcept">
            <summary>
            "skos:hasTopConcept" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Broader">
            <summary>
            "skos:broader" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.BroaderTransitive">
            <summary>
            "skos:broaderTransitive" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.BroadMatch">
            <summary>
            "skos:broadMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Narrower">
            <summary>
            "skos:narrower" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.NarrowerTransitive">
            <summary>
            "skos:narrowerTransitive" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.NarrowMatch">
            <summary>
            "skos:narrowMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Related">
            <summary>
            "skos:related" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.RelatedMatch">
            <summary>
            "skos:relatedMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.SemanticRelation">
            <summary>
            "skos:semanticRelation" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.MappingRelation">
            <summary>
            "skos:mappingRelation" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.CloseMatch">
            <summary>
            "skos:closeMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.ExactMatch">
            <summary>
            "skos:exactMatch" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.Notation">
            <summary>
            "skos:Notation" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.PrefLabel">
            <summary>
            "skosxl:prefLabel" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.AltLabel">
            <summary>
            "skosxl:altLabel" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.HiddenLabel">
            <summary>
            "skosxl:hiddenLabel" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.LiteralForm">
            <summary>
            "skosxl:LiteralForm" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSRelations.LabelRelation">
            <summary>
            "skosxl:LabelRelation" relations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSRelations.#ctor">
            <summary>
            Default-ctor to build an empty relations metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSCollection">
            <summary>
            RDFSKOSCollection represents an instance of skos:Collection within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ConceptsCount">
            <summary>
            Count of the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.CollectionsCount">
            <summary>
            Count of the collections of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ConceptsEnumerator">
            <summary>
            Gets the enumerator on the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.CollectionsEnumerator">
            <summary>
            Gets the enumerator on the collections of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.Concepts">
            <summary>
            Dictionary of concepts contained in the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSCollection.Collections">
            <summary>
            Dictionary of collections contained in the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skos:Collection with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.AddConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.AddCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Adds the given collection to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.RemoveConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Removes the given concept from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.RemoveCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Removes the given collection from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.SelectConcept(System.String)">
            <summary>
            Selects the concept represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.SelectCollection(System.String)">
            <summary>
            Selects the collection represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.GetMembers">
            <summary>
            Gets the complete list of concepts contained in the collection 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this collection, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSCollection.ToRDFOntologyData">
            <summary>
            Gets an ontology data representation of this collection
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSConcept">
            <summary>
            RDFSKOSConcept represents an instance of skos:Concept within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConcept.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skos:Concept with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme">
            <summary>
            RDFSKOSConceptScheme represents an instance of skos:ConceptScheme within an ontology data.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ConceptsCount">
            <summary>
            Count of the concepts composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.CollectionsCount">
            <summary>
            Count of the collections composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.OrderedCollectionsCount">
            <summary>
            Count of the ordered collections composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.LabelsCount">
            <summary>
            Count of the labels composing the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ConceptsEnumerator">
            <summary>
            Gets the enumerator on the concepts of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.CollectionsEnumerator">
            <summary>
            Gets the enumerator on the collections of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.OrderedCollectionsEnumerator">
            <summary>
            Gets the enumerator on the ordered collections of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.LabelsEnumerator">
            <summary>
            Gets the enumerator on the labels of the scheme for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Annotations">
            <summary>
            Annotations describing concepts of the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Relations">
            <summary>
            Relations describing concepts of the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Concepts">
            <summary>
            Concepts contained in the scheme (encodes the 'skos:inScheme' relation)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Collections">
            <summary>
            Collections contained in the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.OrderedCollections">
            <summary>
            OrderedCollections contained in the scheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.Labels">
            <summary>
            Labels contained in the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a conceptScheme with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#SKOS#RDFSKOSConcept}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the scheme's concepts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the scheme's concepts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Adds the given collection to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddOrderedCollection(RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection)">
            <summary>
            Adds the given ordered collection to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.AddLabel(RDFSharp.Semantics.SKOS.RDFSKOSLabel)">
            <summary>
            Adds the given label to the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Removes the given concept from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveCollection(RDFSharp.Semantics.SKOS.RDFSKOSCollection)">
            <summary>
            Removes the given collection from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveOrderedCollection(RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection)">
            <summary>
            Removes the given ordered collection from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.RemoveLabel(RDFSharp.Semantics.SKOS.RDFSKOSLabel)">
            <summary>
            Removes the given label from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectConcept(System.String)">
            <summary>
            Selects the concept represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectCollection(System.String)">
            <summary>
            Selects the collection represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectOrderedCollection(System.String)">
            <summary>
            Selects the ordered collection represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.SelectLabel(System.String)">
            <summary>
            Selects the label represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.IntersectWith(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a new intersection scheme from this scheme and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.UnionWith(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a new union scheme from this scheme and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.DifferenceWith(RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme)">
            <summary>
            Builds a new difference scheme from this scheme and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this scheme, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSConceptScheme.ToRDFOntologyData">
            <summary>
            Gets an ontology data representation of this scheme
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSLabel">
            <summary>
            RDFSKOSLabel represents an instance of skosxl:Label within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSLabel.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skosxl:Label with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection">
            <summary>
            RDFSKOSOrderedCollection represents an instance of skos:OrderedCollection within an instance of skos:ConceptScheme
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ConceptsCount">
            <summary>
            Count of the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ConceptsEnumerator">
            <summary>
            Gets the ordered enumerator on the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ConceptsSequentialCounter">
            <summary>
            Internal sequential counter of the concepts of the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.Concepts">
            <summary>
            Dictionary of concepts contained in the collection
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.Representative">
            <summary>
            Reification representative of the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build a skos:OrderedCollection with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.AddConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Adds the given concept to the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.RemoveConcept(RDFSharp.Semantics.SKOS.RDFSKOSConcept)">
            <summary>
            Removes the given concept from the collection
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.SelectConcept(System.String)">
            <summary>
            Selects the concept represented by the given string from the scheme
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.GetMembers">
            <summary>
            Gets the ordered list of concepts contained in the collection 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this collection, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.SKOS.RDFSKOSOrderedCollection.ToRDFOntologyData">
            <summary>
            Gets an ontology data representation of this collection
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntology">
            <summary>
            RDFOntology represents an ontology definition.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntology.Model">
            <summary>
            Model (T-BOX) of the ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntology.Data">
            <summary>
            Data (A-BOX) of the ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntology.Annotations">
            <summary>
            Annotations describing the ontology
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology with the given name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.AddStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.AddCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.RemoveStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.RemoveCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.IntersectWith(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Builds a new intersection ontology from this ontology and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.UnionWith(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Builds a new union ontology from this ontology and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.DifferenceWith(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Builds a new difference ontology from this ontology and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.FromRDFGraph(RDFSharp.Model.RDFGraph)">
            <summary>
            Gets an ontology representation of the given graph.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntology.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyAnnotations">
            <summary>
            RDFOntologyAnnotations represents a collector for annotations describing ontology resources.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.VersionInfo">
            <summary>
            "owl:versionInfo" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.VersionIRI">
            <summary>
            "owl:versionIRI" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.Comment">
            <summary>
            "rdfs:comment" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.Label">
            <summary>
            "rdfs:label" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.SeeAlso">
            <summary>
            "rdfs:seeAlso" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.IsDefinedBy">
            <summary>
            "rdfs:isDefinedBy" annotations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.PriorVersion">
            <summary>
            "owl:priorVersion" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.BackwardCompatibleWith">
            <summary>
            "owl:BackwardCompatibleWith" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.IncompatibleWith">
            <summary>
            "owl:IncompatibleWith" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.Imports">
            <summary>
            "owl:imports" annotations (specific for ontologies)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAnnotations.CustomAnnotations">
            <summary>
            Custom-property annotations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyAnnotations.#ctor">
            <summary>
            Default-ctor to build an empty ontology annotations metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyResource">
            <summary>
            RDFOntologyResource represents a generic resource definition within an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyResource.Value">
            <summary>
            Value of the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.ToString">
            <summary>
            Gets the string representation of the ontology resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsClass">
            <summary>
            Checks if this ontology resource represents an ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsDeprecatedClass">
            <summary>
            Checks if this ontology resource represents an ontology deprecated class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsRestrictionClass">
            <summary>
            Checks if this ontology resource represents an ontology restriction class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsCompositeClass">
            <summary>
            Checks if this ontology resource represents an ontology composite class (union/intersection/complement)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsEnumerateClass">
            <summary>
            Checks if this ontology resource represents an ontology enumerate class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsDataRangeClass">
            <summary>
            Checks if this ontology resource represents an ontology datarange class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsProperty">
            <summary>
            Checks if this ontology resource represents an ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsDeprecatedProperty">
            <summary>
            Checks if this ontology resource represents an ontology deprecated property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsFunctionalProperty">
            <summary>
            Checks if this ontology resource represents an ontology functional property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsSymmetricProperty">
            <summary>
            Checks if this ontology resource represents an ontology symmetric property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsTransitiveProperty">
            <summary>
            Checks if this ontology resource represents an ontology transitive property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsInverseFunctionalProperty">
            <summary>
            Checks if this ontology resource represents an ontology inverse functional property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsAnnotationProperty">
            <summary>
            Checks if this ontology resource represents an ontology annotation property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsDatatypeProperty">
            <summary>
            Checks if this ontology resource represents an ontology datatype property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsObjectProperty">
            <summary>
            Checks if this ontology resource represents an ontology object property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsFact">
            <summary>
            Checks if this ontology resource represents an ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsLiteral">
            <summary>
            Checks if this ontology resource represents an ontology literal
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyResource.IsOntology">
            <summary>
            Checks if this ontology resource represents an ontology
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyTaxonomy">
            <summary>
            RDFOntologyTaxonomy represents a register for storing a generic taxonomy relationship.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomy.Category">
            <summary>
            Category of the ontology taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomy.EntriesCount">
            <summary>
            Count of the taxonomy entries
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomy.EntriesEnumerator">
            <summary>
            Gets the enumerator on the taxonomy entries for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomy.Entries">
            <summary>
            Dictionary of ontology entries composing the taxonomy
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomy.SyncLock">
            <summary>
            SyncLock for entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.#ctor(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyTaxonomyCategory)">
            <summary>
            Default-ctor to build an empty ontology taxonomy of the given category
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyTaxonomyEntry}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the taxonomy entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the taxonomy entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.AddEntry(RDFSharp.Semantics.RDFOntologyTaxonomyEntry)">
            <summary>
            Adds the given taxonomy entry to the taxonomy.
            Returns true if the insertion has been made.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.RemoveEntry(RDFSharp.Semantics.RDFOntologyTaxonomyEntry)">
            <summary>
            Removes the given taxonomy entry from the taxonomy.
            Returns true if the deletion has been made.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.ContainsEntry(RDFSharp.Semantics.RDFOntologyTaxonomyEntry)">
            <summary>
            Checks if the taxonomy contains the given taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.SelectEntriesBySubject(RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Gets a taxonomy with the entries having the specified ontology resource as subject 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.SelectEntriesByPredicate(RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Gets a taxonomy with the entries having the specified ontology resource as predicate 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.SelectEntriesByObject(RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Gets a taxonomy with the entries having the specified ontology resource as object 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.IntersectWith(RDFSharp.Semantics.RDFOntologyTaxonomy)">
            <summary>
            Builds a new intersection taxonomy from this taxonomy and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.UnionWith(RDFSharp.Semantics.RDFOntologyTaxonomy)">
            <summary>
            Builds a new union taxonomy from this taxonomy and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.DifferenceWith(RDFSharp.Semantics.RDFOntologyTaxonomy)">
            <summary>
            Builds a new difference taxonomy from this taxonomy and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomy.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this taxonomy, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyTaxonomyEntry">
            <summary>
            RDFOntologyTaxonomy represents an entry of a RDFOntologyTaxonomy object.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.TaxonomyEntryID">
            <summary>
            Unique representation of the taxonomy entry
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.TaxonomySubject">
            <summary>
            Ontology resource acting as subject of the taxonomy relationship
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.TaxonomyPredicate">
            <summary>
            Ontology resource acting as predicate of the taxonomy relationship
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.TaxonomyObject">
            <summary>
            Ontology resource acting as object of the taxonomy relationship
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.InferenceType">
            <summary>
            Nature of the taxonomy entry as a semantic inference
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.#ctor(RDFSharp.Semantics.RDFOntologyResource,RDFSharp.Semantics.RDFOntologyResource,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Default-ctor to build a taxonomy entry with the given subject, predicate and object resources
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.ToString">
            <summary>
            Gets the string representation of the taxonomy entry
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.Equals(RDFSharp.Semantics.RDFOntologyTaxonomyEntry)">
            <summary>
            Performs the equality comparison between two taxonomy entries
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.SetInference(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceType)">
            <summary>
            Marks this taxonomy entry as a semantic inference, depending on the given parameter
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyTaxonomyEntry.ToRDFTriple">
            <summary>
            Get a triple representation of this taxonomy entry
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyData">
            <summary>
            RDFOntologyData represents the data component (A-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.FactsCount">
            <summary>
            Count of the facts composing the data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.LiteralsCount">
            <summary>
            Count of the literals composing the data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.FactsEnumerator">
            <summary>
            Gets the enumerator on the facts of the data for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.LiteralsEnumerator">
            <summary>
            Gets the enumerator on the literals of the data for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.Annotations">
            <summary>
            Annotations describing facts of the ontology data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.Relations">
            <summary>
            Relations describing facts of the ontology data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.Facts">
            <summary>
            Dictionary of facts composing the data
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyData.Literals">
            <summary>
            Dictionary of literals composing the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.#ctor">
            <summary>
            Default-ctor to build an empty ontology data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyFact}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the data's facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the data's facts
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddFact(RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Adds the given fact to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddLiteral(RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the given literal to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddClassTypeRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the "ontologyFact -> rdf:type -> ontologyClass" relation to the data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddSameAsRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Adds the "aFact -> owl:sameAs -> bFact" relation to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddDifferentFromRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Adds the "aFact -> owl:differentFrom -> bFact" relation to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddAssertionRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Adds the "aFact -> objectProperty -> bFact" relation to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.AddAssertionRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the "ontologyFact -> datatypeProperty -> ontologyLiteral" relation to the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveFact(RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Removes the given fact from the data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveLiteral(RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Removes the given literal from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the given ontology fact
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveClassTypeRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the "ontologyFact -> rdf:type -> ontologyClass" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveSameAsRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> owl:sameAs -> bFact" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveDifferentFromRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> owl:differentFrom -> bFact" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveAssertionRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Removes the "aFact -> objectProperty -> bFact" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.RemoveAssertionRelation(RDFSharp.Semantics.RDFOntologyFact,RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Removes the "ontologyFact -> datatypeProperty -> ontologyLiteral" relation from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.SelectFact(System.String)">
            <summary>
            Selects the fact represented by the given string from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.SelectLiteral(System.String)">
            <summary>
            Selects the literal represented by the given string from the data
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.IntersectWith(RDFSharp.Semantics.RDFOntologyData)">
            <summary>
            Builds a new intersection data from this data and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.UnionWith(RDFSharp.Semantics.RDFOntologyData)">
            <summary>
            Builds a new union data from this data and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.DifferenceWith(RDFSharp.Semantics.RDFOntologyData)">
            <summary>
            Builds a new difference data from this data and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyData.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology data, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyDataMetadata">
            <summary>
            RDFOntologyDataMetadata represents a collector for relations connecting ontology facts.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyDataMetadata.ClassType">
            <summary>
            "rdf:type" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyDataMetadata.SameAs">
            <summary>
            "owl:sameAs" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyDataMetadata.DifferentFrom">
            <summary>
            "owl:differentFrom" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyDataMetadata.Assertions">
            <summary>
            "ontology property -> ontology resource" custom relations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyDataMetadata.#ctor">
            <summary>
            Default-ctor to build an empty ontology data metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyFact">
            <summary>
            RDFOntologyFact represents an instance of an ontology class within an ontology data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyFact.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology fact with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyLiteral">
            <summary>
            RDFOntologyLiteral represents an instance of literal within an ontology data.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyLiteral.#ctor(RDFSharp.Model.RDFLiteral)">
            <summary>
            Default-ctor to build an ontology literal from the given literal.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyModel">
            <summary>
            RDFOntologyModel represents the model component (T-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyModel.ClassModel">
            <summary>
            Submodel containing the ontology classes
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyModel.PropertyModel">
            <summary>
            Submodel containing the ontology properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyModel.#ctor">
            <summary>
            Default-ctor to build an empty ontology model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyModel.IntersectWith(RDFSharp.Semantics.RDFOntologyModel)">
            <summary>
            Builds a new intersection model from this model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyModel.UnionWith(RDFSharp.Semantics.RDFOntologyModel)">
            <summary>
            Builds a new union model from this model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyModel.DifferenceWith(RDFSharp.Semantics.RDFOntologyModel)">
            <summary>
            Builds a new difference model from this model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyModel.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyClass">
            <summary>
            RDFOntologyClass represents a class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClass.Deprecated">
            <summary>
            Flag indicating that this ontology class is "owl:DeprecatedClass"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClass.Nature">
            <summary>
            Nature of the ontology class (RDFS/OWL)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClass.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyClassNature)">
            <summary>
            Default-ctor to build an ontology class with the given name and nature
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClass.SetDeprecated(System.Boolean)">
            <summary>
            Sets or unsets this ontology class as "owl:DeprecatedClass"
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyClassModel">
            <summary>
            RDFOntologyClassModel represents the class-oriented model component (T-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.ClassesCount">
            <summary>
            Count of the classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.RestrictionsCount">
            <summary>
            Count of the restrictions classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.EnumeratesCount">
            <summary>
            Count of the enumerate classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.DataRangesCount">
            <summary>
            Count of the datarange classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.CompositesCount">
            <summary>
            Count of the composite classes composing the class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.ClassesEnumerator">
            <summary>
            Gets the enumerator on the class model's classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.RestrictionsEnumerator">
            <summary>
            Gets the enumerator on the class model's restriction classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.EnumeratesEnumerator">
            <summary>
            Gets the enumerator on the class model's enumerate classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.DataRangesEnumerator">
            <summary>
            Gets the enumerator on the class model's datarange classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.CompositesEnumerator">
            <summary>
            Gets the enumerator on the class model's composite classes for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.Annotations">
            <summary>
            Annotations describing classes of the ontology class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.Relations">
            <summary>
            Relations describing classes of the ontology class model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModel.Classes">
            <summary>
            Dictionary of classes composing the class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.#ctor">
            <summary>
            Default-ctor to build an empty class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyClass}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the class model's classes
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the ontology class model's classes
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddClass(RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the given class to the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddSubClassOfRelation(RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the "childClass -> rdfs:subClassOf -> motherClass" relation to the class model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddEquivalentClassRelation(RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the "aClass -> owl:equivalentClass -> bClass" relation to the class model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddDisjointWithRelation(RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the "aClass -> owl:disjointWith -> bClass" relation to the class model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddOneOfRelation(RDFSharp.Semantics.RDFOntologyEnumerateClass,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Adds the "ontologyEnumerateClass -> owl:oneOf -> ontologyFact" relation to the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddOneOfRelation(RDFSharp.Semantics.RDFOntologyDataRangeClass,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Adds the "ontologyDataRangeClass -> owl:oneOf -> ontologyLiteral" relation to the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddIntersectionOfRelation(RDFSharp.Semantics.RDFOntologyIntersectionClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the "ontologyIntersectionClass -> owl:intersectionOf -> ontologyClass" relation to the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.AddUnionOfRelation(RDFSharp.Semantics.RDFOntologyUnionClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Adds the "ontologyUnionClass -> owl:unionOf -> ontologyClass" relation to the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveClass(RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the given class from the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveSubClassOfRelation(RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the "childClass -> rdfs:subClassOf -> motherClass" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveEquivalentClassRelation(RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the "aClass -> owl:equivalentClass -> bClass" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveDisjointWithRelation(RDFSharp.Semantics.RDFOntologyClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the "aClass -> owl:disjointWith -> bClass" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveOneOfRelation(RDFSharp.Semantics.RDFOntologyEnumerateClass,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Removes the "ontologyEnumerateClass -> owl:oneOf -> ontologyFact" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveOneOfRelation(RDFSharp.Semantics.RDFOntologyDataRangeClass,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Removes the "ontologyDataRangeClass -> owl:oneOf -> ontologyLiteral" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveIntersectionOfRelation(RDFSharp.Semantics.RDFOntologyIntersectionClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the "ontologyIntersectionClass -> owl:intersectionOf -> ontologyClass" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.RemoveUnionOfRelation(RDFSharp.Semantics.RDFOntologyUnionClass,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Removes the "ontologyUnionClass -> owl:unionOf -> ontologyClass" relation from the class model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.SelectClass(System.String)">
            <summary>
            Selects the ontology class represented by the given string from the ontology class model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.IntersectWith(RDFSharp.Semantics.RDFOntologyClassModel)">
            <summary>
            Builds a new intersection class model from this class model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.UnionWith(RDFSharp.Semantics.RDFOntologyClassModel)">
            <summary>
            Builds a new union class model from this class model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.DifferenceWith(RDFSharp.Semantics.RDFOntologyClassModel)">
            <summary>
            Builds a new difference class model from this class model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModel.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology class model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyClassModelMetadata">
            <summary>
            RDFOntologyClassModelMetadata represents a collector for relations describing ontology classes.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModelMetadata.SubClassOf">
            <summary>
            "rdfs:subClassOf" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModelMetadata.EquivalentClass">
            <summary>
            "owl:equivalentClass" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModelMetadata.DisjointWith">
            <summary>
            "owl:disjointWith" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModelMetadata.OneOf">
            <summary>
            "owl:oneOf" relations (specific for enumerate and datarange classes)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModelMetadata.IntersectionOf">
            <summary>
            "owl:intersectionOf" relations (specific for intersection classes)
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyClassModelMetadata.UnionOf">
            <summary>
            "owl:unionOf" relations (specific for union classes)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyClassModelMetadata.#ctor">
            <summary>
            Default-ctor to build an empty ontology class model metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyComplementClass">
            <summary>
            RDFOntologyComplementClass represents a complement class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyComplementClass.ComplementOf">
            <summary>
            Ontology class for which this class represents the complement
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyComplementClass.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Default-ctor to build an ontology complement class of the given class and with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyIntersectionClass">
            <summary>
            RDFOntologyIntersectionClass represents an intersection class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyIntersectionClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology intersection class with the given className
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyUnionClass">
            <summary>
            RDFOntologyUnionClass represents a union class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyUnionClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology union class with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyDataRangeClass">
            <summary>
            RDFOntologyDataRangeClass represents a datarange class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyDataRangeClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology datarange class with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyEnumerateClass">
            <summary>
            RDFOntologyEnumerateClass represents an enumerate class definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyEnumerateClass.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an empty ontology enumerate class with the given name
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyAllValuesFromRestriction">
            <summary>
            RDFOntologyAllValuesFromRestriction represents an "owl:AllValuesFrom" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyAllValuesFromRestriction.FromClass">
            <summary>
            Ontology class representing the only accepted class type of the restricted property's range members
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyAllValuesFromRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Default-ctor to build an "owl:AllValuesFrom" ontology restriction with the given name on the given property and the given fromClass
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyCardinalityRestriction">
            <summary>
            RDFOntologyCardinalityRestriction represents an "owl:Cardinality" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyCardinalityRestriction.MinCardinality">
            <summary>
            Minimum accepted cardinality for the restriction to be satisfied
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyCardinalityRestriction.MaxCardinality">
            <summary>
            Maximum accepted cardinality for the restriction to be satisfied
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyCardinalityRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyProperty,System.Int32,System.Int32)">
            <summary>
            Default-ctor to build an ontology cardinality restriction with the given name on the given property
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyHasValueRestriction">
            <summary>
            RDFOntologyHasValueRestriction represents an "owl:HasValue" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyHasValueRestriction.RequiredValue">
            <summary>
            Ontology resource representing the accepted value of the restricted property's range members
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyHasValueRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyFact)">
            <summary>
            Default-ctor to build an "owl:HasValue" ontology restriction with the given name on the given property and the given requiredValue
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyHasValueRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyLiteral)">
            <summary>
            Default-ctor to build an "owl:HasValue" ontology restriction with the given name on the given property and the given required value
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyRestriction">
            <summary>
            RDFOntologyRestriction represents a restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyRestriction.OnProperty">
            <summary>
            Ontology property on which the ontology restriction is applied
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Default-ctor to build an ontology restriction with the given name on the given ontology property
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologySomeValuesFromRestriction">
            <summary>
            RDFOntologySomeValuesFromRestriction represents an "owl:SomeValuesFrom" restriction class definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologySomeValuesFromRestriction.FromClass">
            <summary>
            Ontology class representing the accepted class type of the restricted property's range members
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologySomeValuesFromRestriction.#ctor(RDFSharp.Model.RDFResource,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Default-ctor to build an "owl:SomeValuesFrom" ontology restriction with the given name on the given property and the given fromClass
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyProperty">
            <summary>
            RDFOntologyProperty represents a property definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyProperty.Deprecated">
            <summary>
            Flag indicating that this ontology property is "owl:DeprecatedProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyProperty.Functional">
            <summary>
            Flag indicating that this ontology property is "owl:FunctionalProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyProperty.Domain">
            <summary>
            Domain class of the ontology property
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyProperty.Range">
            <summary>
            Range class of the ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology RDF property with the given non-blank name
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyProperty.SetDomain(RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Sets the domain of this ontology property to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyProperty.SetRange(RDFSharp.Semantics.RDFOntologyClass)">
            <summary>
            Sets the range of this ontology property to the given ontology class
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyProperty.SetFunctional(System.Boolean)">
            <summary>
            Sets or unsets this ontology property as "owl:FunctionalProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyProperty.SetDeprecated(System.Boolean)">
            <summary>
            Sets or unsets this ontology property as "owl:DeprecatedProperty"
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyPropertyModel">
            <summary>
            RDFOntologyPropertyModel represents the property-oriented model component (T-BOX) of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.PropertiesCount">
            <summary>
            Count of the properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.AnnotationPropertiesCount">
            <summary>
            Count of the annotation properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.DatatypePropertiesCount">
            <summary>
            Count of the datatype properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.ObjectPropertiesCount">
            <summary>
            Count of the object properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.FunctionalPropertiesCount">
            <summary>
            Count of the functional properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.SymmetricPropertiesCount">
            <summary>
            Count of the symmetric properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.TransitivePropertiesCount">
            <summary>
            Count of the transitive properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.InverseFunctionalPropertiesCount">
            <summary>
            Count of the inverse functional properties composing the property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.PropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.AnnotationPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's annotation properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.DatatypePropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's datatype properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.ObjectPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's object properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.FunctionalPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's functional properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.SymmetricPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's symmetric properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.TransitivePropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's transitive properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.InverseFunctionalPropertiesEnumerator">
            <summary>
            Gets the enumerator on the property model's inverse functional properties for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.Annotations">
            <summary>
            Annotations describing properties of the ontology property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.Relations">
            <summary>
            Relations describing properties of the ontology property model
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModel.Properties">
            <summary>
            Dictionary of properties composing the property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.#ctor">
            <summary>
            Default-ctor to build an empty property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyProperty}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the property model's properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the property model's properties
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddProperty(RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Adds the given property to the ontology property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given standard annotation to the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Adds the given custom annotation to the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddSubPropertyOfRelation(RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Adds the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation to the property model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddSubPropertyOfRelation(RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyDatatypeProperty)">
            <summary>
            Adds the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation to the property model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddEquivalentPropertyRelation(RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Adds the "aProperty -> owl:equivalentProperty -> bProperty" relation to the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddEquivalentPropertyRelation(RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyDatatypeProperty)">
            <summary>
            Adds the "aProperty -> owl:equivalentProperty -> bProperty" relation to the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.AddInverseOfRelation(RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Adds the "aProperty -> owl:inverseOf -> bProperty" relation to the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveProperty(RDFSharp.Semantics.RDFOntologyProperty)">
            <summary>
            Removes the given property from the ontology property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveStandardAnnotation(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyStandardAnnotation,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given standard annotation from the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveCustomAnnotation(RDFSharp.Semantics.RDFOntologyAnnotationProperty,RDFSharp.Semantics.RDFOntologyProperty,RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Removes the given custom annotation from the given ontology property
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveSubPropertyOfRelation(RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Removes the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation from the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveSubPropertyOfRelation(RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyDatatypeProperty)">
            <summary>
            Removes the "childProperty -> rdfs:subPropertyOf -> motherProperty" relation from the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveEquivalentPropertyRelation(RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Removes the "aProperty -> owl:equivalentProperty -> bProperty" relation from the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveEquivalentPropertyRelation(RDFSharp.Semantics.RDFOntologyDatatypeProperty,RDFSharp.Semantics.RDFOntologyDatatypeProperty)">
            <summary>
            Removes the "aProperty -> owl:equivalentProperty -> bProperty" relation from the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.RemoveInverseOfRelation(RDFSharp.Semantics.RDFOntologyObjectProperty,RDFSharp.Semantics.RDFOntologyObjectProperty)">
            <summary>
            Removes the "aProperty -> owl:inverseOf -> bProperty" relation from the property model 
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.SelectProperty(System.String)">
            <summary>
            Selects the ontology property represented by the given string from the ontology property model
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.IntersectWith(RDFSharp.Semantics.RDFOntologyPropertyModel)">
            <summary>
            Builds a new intersection property model from this property model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.UnionWith(RDFSharp.Semantics.RDFOntologyPropertyModel)">
            <summary>
            Builds a new union property model from this property model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.DifferenceWith(RDFSharp.Semantics.RDFOntologyPropertyModel)">
            <summary>
            Builds a new difference property model from this property model and a given one
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModel.ToRDFGraph(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyInferenceExportBehavior)">
            <summary>
            Gets a graph representation of this ontology property model, exporting inferences according to the selected behavior
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyPropertyModelMetadata">
            <summary>
            RDFOntologyPropertyModelMetadata represents a collector for relations describing ontology properties.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModelMetadata.SubPropertyOf">
            <summary>
            "rdfs:subPropertyOf" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModelMetadata.EquivalentProperty">
            <summary>
            "owl:equivalentProperty" relations
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyPropertyModelMetadata.InverseOf">
            <summary>
            "owl:inverseOf" relations
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyPropertyModelMetadata.#ctor">
            <summary>
            Default-ctor to build an empty ontology property model metadata
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyAnnotationProperty">
            <summary>
            RDFOntologyAnnotationProperty represents an annotation property definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyAnnotationProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology annotation property from the given non-blank resource
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyDatatypeProperty">
            <summary>
            RDFOntologyDatatypeProperty represents a datatype property definition within an ontology model.
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyDatatypeProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology datatype property from the given non-blank resource
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyObjectProperty">
            <summary>
            RDFOntologyObjectProperty represents an object property definition within an ontology model.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyObjectProperty.Symmetric">
            <summary>
            Flag indicating that the ontology property is "owl:SymmetricProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyObjectProperty.Transitive">
            <summary>
            Flag indicating that the ontology property is "owl:TransitiveProperty"
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyObjectProperty.InverseFunctional">
            <summary>
            Flag indicating that the ontology property is "owl:InverseFunctionalProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyObjectProperty.#ctor(RDFSharp.Model.RDFResource)">
            <summary>
            Default-ctor to build an ontology object property from the given non-blank resource
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyObjectProperty.SetSymmetric(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:SymmetricProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyObjectProperty.SetTransitive(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:TransitiveProperty"
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyObjectProperty.SetInverseFunctional(System.Boolean)">
            <summary>
            Sets or unsets this ontology object property as "owl:InverseFunctionalProperty"
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyReasoner">
            <summary>
            RDFOntologyReasoner represents an inference engine applied on a given ontology
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasoner.ReasonerDescription">
            <summary>
            Description of the reasoner
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasoner.RulesCount">
            <summary>
            Count of the rules composing the reasoner
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasoner.Rules">
            <summary>
            List of rules applied by the reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.#ctor(System.String)">
            <summary>
            Default-ctor to build an empty ontology reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyReasonerRule}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the reasoner's rules
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the reasoner's rules
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.CreateNew(System.String)">
            <summary>
            Creates a new reasoner with the given description
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.WithRule(RDFSharp.Semantics.RDFOntologyReasonerRule)">
            <summary>
            Adds the given rule to the reasoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.SelectRule(System.String)">
            <summary>
            Selects the given rule from the resoner
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasoner.ApplyToOntology(RDFSharp.Semantics.RDFOntology@)">
            <summary>
            Applies the reasoner on the given ontology, producing a reasoning report.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyReasonerEvidence">
            <summary>
            RDFOntologyReasonerEvidence represents an inference evidence generated during execution of a rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerEvidence.EvidenceCategory">
            <summary>
            Category of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerEvidence.EvidenceProvenance">
            <summary>
            Provenance rule of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerEvidence.EvidenceContent">
            <summary>
            Content of the evidence
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerEvidence.#ctor(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory,System.String,RDFSharp.Semantics.RDFOntologyTaxonomyEntry)">
            <summary>
            Default-ctor to build an evidence with given category, provenance and message
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyReasonerReport">
            <summary>
            RDFOntologyReasonerReport represents a detailed report of an ontology reasoner's activity.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerReport.EvidencesCount">
            <summary>
            Counter of the evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerReport.EvidencesEnumerator">
            <summary>
            Gets an enumerator on the evidences for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerReport.Evidences">
            <summary>
            Dictionary of evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerReport.SyncLock">
            <summary>
            SyncLock for evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.#ctor">
            <summary>
            Default-ctor to build an empty reasoner report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyReasonerEvidence}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the reasoner report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the reasoner report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.AddEvidence(RDFSharp.Semantics.RDFOntologyReasonerEvidence)">
            <summary>
            Adds the given evidence to the reasoner report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.Merge(RDFSharp.Semantics.RDFOntologyReasonerReport)">
            <summary>
            Merges the evidences of the given report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.SelectEvidencesByCategory(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyReasonerEvidenceCategory)">
            <summary>
            Gets the evidences having the given category
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.SelectEvidencesByProvenance(System.String)">
            <summary>
            Gets the evidences having the given provenance rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.SelectEvidencesByContentSubject(RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Gets the evidences having the given content subject
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.SelectEvidencesByContentPredicate(RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Gets the evidences having the given content predicate
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerReport.SelectEvidencesByContentObject(RDFSharp.Semantics.RDFOntologyResource)">
            <summary>
            Gets the evidences having the given content object
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyReasonerRule">
            <summary>
            RDFOntologyReasonerRule represents an inference rule executed by a reasoner
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerRule.RuleName">
            <summary>
            Name of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerRule.RuleDescription">
            <summary>
            Description of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerRule.RulePriority">
            <summary>
            Execution priority of the rule (less is more priority)
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyReasonerRule.ReasonerRuleDelegate">
            <summary>
            Delegate for the function which will be executed as body of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyReasonerRule.ExecuteRule">
            <summary>
            Function which will be executed as body of the rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerRule.#ctor(System.String,System.String,System.UInt32,RDFSharp.Semantics.RDFOntologyReasonerRule.ReasonerRuleDelegate)">
            <summary>
            Default-ctor to build a reasoner rule with the given name, description and priority (lower is better)
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerRule.ToString">
            <summary>
            Gives the name of the reasoner rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerRule.ToFullString">
            <summary>
            Gives the full representation of the reasoner rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyReasonerRule.SetPriority(System.UInt32)">
            <summary>
            Redefines the execution priority of the reasoner rule
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyValidator">
            <summary>
            RDFOntologyValidator analyzes a given ontology through a set of RDFS/OWL-DL rules
            in order to find error and inconsistency evidences affecting its model and data.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidator.Rules">
            <summary>
            List of rules applied by the ontology validator
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidator.#cctor">
            <summary>
            Static-ctor to build an ontology validator
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidator.Validate(RDFSharp.Semantics.RDFOntology)">
            <summary>
            Validate the given ontology against a set of RDFS/OWL-DL rules, detecting errors and inconsistencies affecting its model and data.
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyValidatorEvidence">
            <summary>
            RDFOntologyValidatorEvidence represents an evidence reported by a validation rule.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorEvidence.EvidenceCategory">
            <summary>
            Category of this evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorEvidence.EvidenceProvenance">
            <summary>
            Rule which has reported this evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorEvidence.EvidenceMessage">
            <summary>
            Message of the evidence
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorEvidence.EvidenceSuggestion">
            <summary>
            Proposed action for solving or mitigating the evidence
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorEvidence.#ctor(RDFSharp.Semantics.RDFSemanticsEnums.RDFOntologyValidatorEvidenceCategory,System.String,System.String,System.String)">
            <summary>
            Default-ctor to build an evidence with given category, provenance, message and suggestion
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyValidatorReport">
            <summary>
            RDFOntologyValidatorReport represents a detailed report of an ontology analysis.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorReport.EvidencesCount">
            <summary>
            Counter of the evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorReport.EvidencesEnumerator">
            <summary>
            Gets an enumerator on the evidences for iteration
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorReport.Evidences">
            <summary>
            List of evidences
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorReport.SyncLock">
            <summary>
            SyncLock for evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.#ctor">
            <summary>
            Default-ctor to build an empty report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.System#Collections#Generic#IEnumerable{RDFSharp#Semantics#RDFOntologyValidatorEvidence}#GetEnumerator">
            <summary>
            Exposes a typed enumerator on the validation report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an untyped enumerator on the validation report's evidences
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.AddEvidence(RDFSharp.Semantics.RDFOntologyValidatorEvidence)">
            <summary>
            Adds the given evidence to the validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.MergeEvidences(RDFSharp.Semantics.RDFOntologyValidatorReport)">
            <summary>
            Merges the evidences of the given report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.EnlistRuleNames">
            <summary>
            Enlist the names of the rules applied by the validator
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.SelectWarnings">
            <summary>
            Gets the warning evidences from the validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.SelectWarningsByRule(System.String)">
            <summary>
            Gets the warning evidences of the given validation rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.SelectErrors">
            <summary>
            Gets the error evidences from the validation report
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorReport.SelectErrorsByRule(System.String)">
            <summary>
            Gets the error evidences of the given validation rule
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyValidatorRule">
            <summary>
            RDFOntologyValidatorRule represents a rule which analyzes a specific syntactic/semantic aspect of an ontology.
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorRule.RuleName">
            <summary>
            Name of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorRule.RuleDescription">
            <summary>
            Description of the rule
            </summary>
        </member>
        <member name="T:RDFSharp.Semantics.RDFOntologyValidatorRule.ValidationRuleDelegate">
            <summary>
            Delegate for the function which will be executed as body of the rule
            </summary>
        </member>
        <member name="P:RDFSharp.Semantics.RDFOntologyValidatorRule.ExecuteRule">
            <summary>
            Function which will be executed as body of the rule
            </summary>
        </member>
        <member name="M:RDFSharp.Semantics.RDFOntologyValidatorRule.#ctor(System.String,System.String,RDFSharp.Semantics.RDFOntologyValidatorRule.ValidationRuleDelegate)">
            <summary>
            Default-ctor to build an empty validation rule with given name, description and delegate
            </summary>
        </member>
    </members>
</doc>
